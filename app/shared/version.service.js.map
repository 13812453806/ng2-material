{"version":3,"file":"version.service.js","sourceRoot":"","sources":["version.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA6B,eAAe,CAAC,CAAA;AAQ7C;IAKE,wBAAY,IAAU;QALxB,iBAiBC;QAhBQ,SAAI,GAAiB,IAAI,CAAC;QAK/B,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAO,UAAC,OAAO;YACxC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,UAAC,GAAa;gBAC/C,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;gBACvB,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gCAAO,GAAP;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAQ,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAjBH;QAAC,iBAAU,EAAE;;sBAAA;IAkBb,qBAAC;AAAD,CAAC,AAjBD,IAiBC;AAjBY,sBAAc,iBAiB1B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Response} from '@angular/http';\n\nexport interface IVersionMeta {\n  version: string;\n  readme: string;\n}\n\n@Injectable()\nexport class VersionService {\n  public meta: IVersionMeta = null;\n\n  private _promise: Promise<void>;\n\n  constructor(http: Http) {\n    this._promise = new Promise<void>((resolve) => {\n      http.get('version.json').subscribe((res: Response) => {\n        this.meta = res.json();\n        resolve();\n      });\n    });\n  }\n\n  getMeta(): Promise<IVersionMeta> {\n    return this._promise.then(() => { return this.meta; });\n  }\n}\n"]}