{"version":3,"file":"example.component.js","sourceRoot":"","sources":["example.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  ComponentRef,\n  ViewContainerRef,\n  AfterViewInit,\n  ViewChild,\n  ComponentResolver\n} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {MdToolbar} from '@angular2-material/toolbar';\nimport {MD_TABS_DIRECTIVES} from '@angular2-material/tabs';\nimport {MATERIAL_DIRECTIVES} from 'ng2-material';\nimport {IExampleData, DEMO_DIRECTIVES} from '../../index';\nimport {HighlightComponent} from '../highlight/highlight.component';\n\nexport interface ISourceFile {\n  data: string;\n  type: string;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'docs-example',\n  templateUrl: 'example.component.html',\n  styleUrls: ['example.component.css'],\n  directives: [MATERIAL_DIRECTIVES, MD_TABS_DIRECTIVES, HighlightComponent, MdToolbar]\n})\nexport class ExampleComponent implements AfterViewInit {\n  private _model: IExampleData = null;\n  private _reference: ComponentRef<any> = null;\n\n  @Input()\n  set model(value: IExampleData) {\n    this._model = value;\n    this.applyModel(value);\n  }\n\n  get model(): IExampleData {\n    return this._model;\n  }\n\n  private _loaded: boolean = false;\n  get loaded(): boolean {\n    return this._loaded;\n  }\n\n  constructor(public http: Http,\n              private _componentResolver: ComponentResolver) {\n  }\n\n  private _init: boolean = false;\n\n  /**\n   * The set of source files associated with the example\n   */\n  @Input() public orderedFiles: ISourceFile[] = [];\n\n  /**\n   * True to show the source code for the example\n   */\n  @Input() public showSource: boolean = false;\n\n  /**\n   * The selected type of source to view.\n   */\n  @Input() public selected: string = 'html';\n\n  @ViewChild('example', {read: ViewContainerRef}) private exampleRef: ViewContainerRef;\n\n  ngAfterViewInit(): any {\n    this._init = true;\n    if (this._model) {\n      this.applyModel(this._model);\n    }\n  }\n\n\n  applyModel(model: IExampleData) {\n    if (!this._init) {\n      return;\n    }\n    this.orderedFiles = [];\n    this._loaded = false;\n    // Fetch template, styles, and source strings for display.\n    if (model.template) {\n      this.addFile(model.template, 'html');\n    }\n    if (model.styles) {\n      this.addFile(model.styles, 'scss');\n    }\n    if (model.source) {\n      this.addFile(model.source, 'typescript');\n    }\n\n    // Render the example component into the view.\n    let template = `<${model.component}></${model.component}>`;\n    @Component({\n      selector: `md-example-${model.component}`,\n      template: template,\n      directives: [MATERIAL_DIRECTIVES, DEMO_DIRECTIVES, HighlightComponent]\n    })\n    class CompiledComponent {\n    }\n    return this._componentResolver.resolveComponent(CompiledComponent).then(componentFactory => {\n      let ref = this.exampleRef.createComponent(componentFactory, this.exampleRef.length, this.exampleRef.parentInjector);\n      if (this._reference) {\n        this._reference.destroy();\n      }\n      this._loaded = true;\n      this._reference = ref;\n    });\n  }\n\n  addFile(data: string, type: string) {\n    let desc: ISourceFile = {type: type, data: data};\n    // this.http.get(url).subscribe((res: Response) => { desc.data = res.text(); });\n    this.orderedFiles.push(desc);\n  }\n}\n"]}